#prune to dissimilarities between subsequent samples, as a measure of rate of temporal turnover
j4 <- intradist %>%
group_by(method, subject, t1) %>%
filter(t2 > t1) %>%
filter(t2 == min(t2)) %>%
mutate(group = 'Dissimilarity to next sample')
#prune to dissimilarity to final sample
j5 <- intradist %>%
group_by(method, subject, t1) %>%
filter(t2 == max(t2) & t1 != max(t2)) %>%
mutate(group = 'Dissimilarity to final sample')
#determine difference, if any, between simulated and observed initial trait dissimilarity
#later this will be used to adjust simulated and observed data start together
tb_bump <- j5 %>%
ungroup() %>%
filter(method == 'Trait-based dissimilarity') %>%
mutate(t1 = t1 %/% 6 * 6) %>%
filter(t1 == min(t1)) %>%
summarise(diff = mean(dist[data == 'obs']) -
mean(dist[data == 'ran'])) %>%
pull(diff)
#apply tb_bump
j5 <- j5 %>%
mutate(
dist = ifelse(group == 'Dissimilarity to final sample' &
method == 'Trait-based dissimilarity' &
data == 'ran',
dist + tb_bump, dist))
#combine and modify for plotting
j <- bind_rows(j4, j5) %>%
ungroup() %>%
mutate(tbin = (t1 %/% 6) * 6 + 3) %>%
filter(tbin < 36) %>%
mutate(
group = factor(group, levels = unique(group)),
method = factor(method),
data = factor(c('Observed','Null model')[match(data, c('obs','ran'))],
c('Observed','Null model')))
#perform t.tests between simulated nulls and observed trait dissimilarity
statz <- j %>%
filter(method == "Trait-based dissimilarity") %>%
group_by(method, group, subject, tbin, data) %>%
summarise(dist = mean(dist)) %>%
group_by(method, group, tbin) %>%
do(mod = t.test(dist ~ data, .)) %>%
mutate(pval = mod$p.value,
sig = pval < 0.1,
symb = ifelse(pval < 0.001, '***',
ifelse(pval < 0.01, '**',
ifelse(pval < 0.05, '*',
ifelse(pval < 0.1, '', '')))))
#add significance values to data
j <- j %>% left_join(statz, by = c("method", "group", "tbin"))
#determine positioning for significance markers
tmp <- j %>%
group_by(tbin, method, group, data, sig, symb) %>%
summarise(dist = mean(dist)) %>%
group_by(tbin, method, group) %>%
mutate(symb = ifelse(sig & dist == max(dist), symb, NA),
sig = ifelse(is.na(symb), NA, sig))
p1 <- j %>%
filter(method == 'OTU-based dissimilarity' & group == 'Dissimilarity to next sample') %>%
ggplot(aes(x = tbin, y = dist, lty = data)) +
stat_summary(fun.y = mean, geom = "point", aes(shape = data)) +
stat_summary(fun.data = mean_cl_boot, geom = "linerange", data = filter(j, method == 'OTU-based dissimilarity' & group == 'Dissimilarity to next sample' & tbin < 39)) +
geom_line(data = filter(tmp, method == 'OTU-based dissimilarity' & group == 'Dissimilarity to next sample')) +
labs(x = 'Months after birth', y = 'OTU-based dissimilarity\nto next sample', tag = 'a  ') +
scale_linetype_discrete(name = '') +
scale_shape_manual(values = c(16,1), name = '') +
scale_x_continuous(breaks = c(3,9,15,21,27,33)) +
scale_y_continuous(labels=scaleFUN) +
expand_limits(y = 1) +
theme_classic() +
theme(legend.position = 'none')
p2 <- j %>%
filter(method == 'OTU-based dissimilarity' & group == 'Dissimilarity to final sample') %>%
ggplot(aes(x = tbin, y = dist, lty = data)) +
stat_summary(fun.y = mean, geom = "point", aes(shape = data)) +
stat_summary(fun.data = mean_cl_boot, geom = "linerange", data = filter(j, method == 'OTU-based dissimilarity' & group == 'Dissimilarity to final sample' & tbin < 39)) +
geom_line(data = filter(tmp, method == 'OTU-based dissimilarity' & group == 'Dissimilarity to final sample')) +
labs(x = 'Months after birth', y = 'OTU-based dissimilarity\nto final sample', tag = 'b  ') +
scale_linetype_discrete(name = '') +
scale_shape_manual(values = c(16,1), name = '') +
scale_x_continuous(breaks = c(3,9,15,21,27,33)) +
scale_y_continuous(labels=scaleFUN) +
expand_limits(y = 1) +
theme_classic() +
theme(legend.position = 'none')
p3 <- j %>%
filter(method == 'Trait-based dissimilarity' & group == 'Dissimilarity to next sample') %>%
ggplot(aes(x = tbin, y = dist, lty = data)) +
stat_summary(fun.y = mean, geom = "point", aes(shape = data)) +
stat_summary(fun.data = mean_cl_boot, geom = "linerange", data = filter(j, method == 'Trait-based dissimilarity' & group == 'Dissimilarity to next sample' & tbin < 39)) +
geom_text(aes(label = symb, y = dist + 0.5), data = filter(tmp, method == 'Trait-based dissimilarity' & group == 'Dissimilarity to next sample'), size = 6) +
geom_line(data = filter(tmp, method == 'Trait-based dissimilarity' & group == 'Dissimilarity to next sample')) +
labs(x = 'Months after birth', y = 'Trait-based dissimilarity\nto next sample', tag = 'c  ') +
scale_linetype_discrete(name = '') +
scale_shape_manual(values = c(16,1), name = '') +
scale_x_continuous(breaks = c(3,9,15,21,27,33)) +
scale_y_continuous(labels=scaleFUN) +
expand_limits(y = 6) +
theme_classic() +
theme(legend.position = 'none')
p4 <- j %>%
filter(method == 'Trait-based dissimilarity' & group == 'Dissimilarity to final sample') %>%
ggplot(aes(x = t1, y = dist, lty = data)) +
geom_point() + stat_smooth()
stat_summary(fun.y = mean, geom = "point", aes(shape = data)) +
stat_summary(fun.data = mean_cl_boot, geom = "linerange", data = filter(j, method == 'Trait-based dissimilarity' & group == 'Dissimilarity to final sample' & tbin < 39)) +
geom_text(aes(label = symb, y = dist + 0.5), data = filter(tmp, method == 'Trait-based dissimilarity' & group == 'Dissimilarity to final sample'), size = 6) +
geom_line(data = filter(tmp, method == 'Trait-based dissimilarity' & group == 'Dissimilarity to final sample')) +
labs(x = 'Months after birth', y = 'Trait-based dissimilarity\nto final sample', tag = 'd  ') +
scale_linetype_discrete(name = '') +
scale_shape_manual(values = c(16,1), name = '') +
scale_x_continuous(breaks = c(3,9,15,21,27,33)) +
scale_y_continuous(labels=scaleFUN) +
theme_classic() +
theme(legend.position = 'bottom', legend.justification="center")
myleg <- get_legend(p4)
p4 <- p4 + theme(legend.position = 'none')
ps <- plot_grid(p1, p2, p3, p4, ncol = 2)
figIntrababyDiss <- plot_grid(ps, myleg, ncol = 1, rel_heights = c(1, .07))
p4 <- j %>%
filter(method == 'Trait-based dissimilarity' & group == 'Dissimilarity to final sample') %>%
ggplot(aes(x = tbin, y = dist, lty = data)) +
stat_summary(fun.y = mean, geom = "point", aes(shape = data)) +
stat_summary(fun.data = mean_cl_boot, geom = "linerange", data = filter(j, method == 'Trait-based dissimilarity' & group == 'Dissimilarity to final sample' & tbin < 39)) +
geom_text(aes(label = symb, y = dist + 0.5), data = filter(tmp, method == 'Trait-based dissimilarity' & group == 'Dissimilarity to final sample'), size = 6) +
geom_line(data = filter(tmp, method == 'Trait-based dissimilarity' & group == 'Dissimilarity to final sample')) +
labs(x = 'Months after birth', y = 'Trait-based dissimilarity\nto final sample', tag = 'd  ') +
scale_linetype_discrete(name = '') +
scale_shape_manual(values = c(16,1), name = '') +
scale_x_continuous(breaks = c(3,9,15,21,27,33)) +
scale_y_continuous(labels=scaleFUN) +
theme_classic() +
theme(legend.position = 'bottom', legend.justification="center")
myleg <- get_legend(p4)
p4 <- p4 + theme(legend.position = 'none')
ps <- plot_grid(p1, p2, p3, p4, ncol = 2)
figIntrababyDiss <- plot_grid(ps, myleg, ncol = 1, rel_heights = c(1, .07))
##Figure of interbaby dissimilarity
figInterbabyDiss <- function(){}
#use meltdist() to calculate dissimilarities within subjects for each method
#filter out low density tbins
j1 <- otus %>%
spread(otu, abun, fill = 0) %>%
mutate(tbin = round(t)) %>%
filter(tbin < 36) %>%
group_by(tbin) %>%
do(meltdist(x = .$sampleID, y = ., method = 'bray')) %>%
mutate(method = 'OTU-based dissimilarity', data = 'obs')
#second method: we use CWMs for columns, and calculate scaled euclidean distance
j2 <- otus %>%
left_join(traits, by = 'otu') %>%
mutate(tbin = round(t)) %>%
filter(tbin < 36) %>%
filter(!is.na(trait)) %>%
group_by(sampleID, subject, trait, tbin, t) %>%
summarise(val = weighted.mean(val, w = abun, na.rm = TRUE)) %>%
group_by(trait) %>%
mutate(val = scale(val)) %>%
spread(trait, val) %>%
group_by(tbin) %>%
do(meltdist(x = .$sampleID, y = ., method = 'euclidean')) %>%
mutate(method = 'Trait-based dissimilarity', data = 'obs')
#recalculate null model predictions? With 1000 reps it takes ~1hr on my machine.
if (FALSE) {
#empty list to store reps
j3 <- list()
#number of reps
reps <- 1000
for (rep in 1:reps) {
#sample() shuffles values in a vector
tmp <- otus %>%
left_join(traits, by = 'otu') %>%
group_by(trait) %>%
mutate(val = sample(val)) %>%
filter(!is.na(val)) %>%
mutate(tbin = round(t)) %>%
group_by(sampleID, subject, trait, tbin, t) %>%
summarise(val = weighted.mean(val, w = abun, na.rm = TRUE)) %>%
group_by(trait) %>%
mutate(val = scale(val)) %>%
spread(trait, val) %>%
group_by(tbin) %>%
do(meltdist(x = .$sampleID, y = ., method = 'euclidean')) %>%
mutate(method = 'Trait-based dissimilarity', data = 'ran')
j3[[rep]] <- tmp
print(paste(rep, 'of', reps, 'done'))
flush.console()
if (rep == reps) {
#save null simulation data
bind_rows(j3) %>%
group_by(tbin, sample1, sample2, t1, t2, method, data) %>%
summarise(dist = mean(dist)) %>%
saveRDS(file = 'data\\null_interbaby_predictions.RDS')
}}}
j3 <- readRDS('data\\null_interbaby_predictions.RDS')
#determine difference, if any, between simulated and observed initial trait dissimilarity
#later this will be used to adjust simulated and observed data to start together
tb_bump <- bind_rows(j2, j3) %>%
ungroup() %>%
mutate(t1 = t1 %/% 6 * 6 + 3) %>%
filter(t1 == min(t1)) %>%
summarise(diff = mean(dist[data == 'obs']) -
mean(dist[data == 'ran'])) %>%
pull(diff)
#apply tb_bump
j3$dist <- j3$dist + tb_bump
#combine
interdist <- bind_rows(j1, j2, j3) %>%
mutate(subject1 = gsub("_.*", "", sample1),
subject2 = gsub("_.*", "", sample2)) %>%
filter(subject1 != subject2) %>%
ungroup()
#calculate means in 6 mo bins
j <- interdist %>%
group_by(method, data, tbin) %>%
summarise(dist = mean(dist)) %>%
mutate(tbin = (tbin %/% 6) * 6 + 3) %>%
ungroup() %>%
mutate(data = factor(c('Observed','Null model')[match(data, c('obs','ran'))], c('Observed','Null model')))
dim(j)
dim(interdist)
head(interdist)
#calculate means in 6 mo bins
j <- interdist %>%
group_by(method, data, tbin) %>%
summarise(dist = mean(dist), n = length(data)) %>%
mutate(tbin = (tbin %/% 6) * 6 + 3) %>%
ungroup() %>%
mutate(data = factor(c('Observed','Null model')[match(data, c('obs','ran'))], c('Observed','Null model')))
hist(j$n)
range(j$n)
head(j)
head(interdist)
ggplot(interdist, aes(x = dist, y = t1, color = data)) + geom_point() + stat_smooth() + facet_wrap(~method)
ggplot(interdist, aes(y = dist, x = t1, color = data)) + geom_point() + stat_smooth(aes(lty = data), color = 'black') + facet_wrap(~method)
#calculate means in 6 mo bins
j <- interdist %>%
group_by(method, data, tbin) %>%
summarise(dist = mean(dist), n = length(data)) %>%
mutate(tbin = (tbin %/% 6) * 6 + 3) %>%
ungroup() %>%
mutate(data = factor(c('Observed','Null model')[match(data, c('obs','ran'))], c('Observed','Null model')))
range(j$n)
range(j$n[j$tbin < 39])
statz <- j %>%
filter(method == "Trait-based dissimilarity") %>%
filter(tbin < 39) %>%
group_by(method, tbin) %>%
summarise(n = length(tbin))
statz
statz <- j %>%
filter(method == "Trait-based dissimilarity") %>%
filter(tbin < 39) %>%
group_by(method, tbin, data) %>%
summarise(n = length(tbin))
statz
range(j$n)
#scale each trait, calculate variance of trait values of *cells* not species
tmp <- otus %>%
left_join(traits, by = 'otu') %>%
filter(!is.na(val)) %>%
left_join(meta, by = 'subject') %>%
group_by(trait) %>%
mutate(val = scale(val)) %>%
group_by(subject, t, trait) %>%
summarise(var = var(rep(val, times = abun))) %>%
ungroup() %>%
mutate(t = round(t)) %>%
filter(t < 37 & t >= 2) %>%
mutate(trait = trait_names[match(trait, names(trait_names))],
trait = ifelse(trait == 'Temperature optimum', 'Temp. optimum', trait))
myplots <- list()
ts <- sort(unique(tmp$trait))
for (i in ts) {
myplots[[i]] <- ggplot(tmp[tmp$trait == i, ], aes(x = t, y = var)) +
stat_summary(fun.y = mean, geom = "point", color = 'darkcyan') +
stat_summary(fun.data = mean_cl_boot, geom = "linerange", color = 'darkcyan') +
stat_summary(fun.data = mean_cl_boot, geom = "linerange", color = 'darkcyan', data = tmp,
aes(group = trait), alpha = 0)) +
stat_smooth(se = FALSE, color = 'black') +
scale_x_continuous(breaks= seq(10,30,by=10)) +
labs(x = '', y = '', tag = letters[match(i, ts)]) +
ggtitle(i) +
theme_bw() +
theme(
legend.position = 'none',
panel.background = element_blank(),
strip.background = element_blank(),
axis.title = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "pt"),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5, size = 11)) +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf)+
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf)
}
myplots <- list()
ts <- sort(unique(tmp$trait))
for (i in ts) {
myplots[[i]] <- ggplot(tmp[tmp$trait == i, ], aes(x = t, y = var)) +
stat_summary(fun.y = mean, geom = "point", color = 'darkcyan') +
stat_summary(fun.data = mean_cl_boot, geom = "linerange", color = 'darkcyan') +
stat_summary(fun.data = mean_cl_boot, geom = "linerange", color = 'darkcyan', data = tmp,
aes(group = trait), alpha = 0) +
stat_smooth(se = FALSE, color = 'black') +
scale_x_continuous(breaks= seq(10,30,by=10)) +
labs(x = '', y = '', tag = letters[match(i, ts)]) +
ggtitle(i) +
theme_bw() +
theme(
legend.position = 'none',
panel.background = element_blank(),
strip.background = element_blank(),
axis.title = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "pt"),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5, size = 11)) +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf)+
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf)
}
myplots[[1]]
myplots <- list()
ts <- sort(unique(tmp$trait))
for (i in ts) {
myplots[[i]] <- ggplot(tmp[tmp$trait == i, ], aes(x = t, y = var)) +
stat_summary(fun.y = mean, geom = "point", color = 'darkcyan') +
stat_summary(fun.data = mean_cl_boot, geom = "linerange", color = 'darkcyan') +
stat_summary(fun.data = mean_cl_boot, geom = "linerange", color = 'darkcyan', data = tmp,
aes(group = trait), alpha = 0) +
stat_smooth(se = FALSE, color = 'black') +
scale_x_continuous(breaks= seq(10,30,by=10)) +
labs(x = '', y = '', tag = letters[match(i, ts)]) +
ggtitle(i) +
theme_bw() +
theme(
legend.position = 'none',
panel.background = element_blank(),
strip.background = element_blank(),
axis.title = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "pt"),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5, size = 11)) +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf)+
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf)
}
myplots[1:9] <- lapply(myplots[1:9], function(x) {
x + theme(axis.text.x = element_blank())
})
ps <- plot_grid(myplots[[1]], myplots[[2]], myplots[[3]], myplots[[4]], myplots[[5]], myplots[[6]], myplots[[7]], myplots[[8]], myplots[[9]], myplots[[10]], myplots[[11]], myplots[[12]], ncol = 3, align = 'hv')
xtitle <- ggdraw() + draw_label("Months after birth")
ytitle <- ggdraw() + draw_label(" Abundance-weighted community variance", angle = 90)
figCWMsVariance <- plot_grid(ps, xtitle, ncol = 1, rel_heights = c(1,0.06))
figCWMsVariance <- plot_grid(ytitle, figCWMsVariance, ncol = 2, rel_widths = c(0.06,1))
plot_it(figCWMsVariance, type = 'supplementary figure', name = 'figCWMsVariance', dir = image_dir, width = 6.5, height = 7.5)
#initialize manuscript formatting script
source('~\\initialize_manuscript.R')
plot_it(figCWMsVariance, type = 'supplementary figure', name = 'figCWMsVariance', dir = image_dir, width = 6.5, height = 7.5)
#set directory where figures will be loaded/generated
#note that kable_as_image doesn't work if there are underscores in the headers...
image_dir <- '~\\msu\\microbiome_trait_succession\\images\\'
plot_it(figCWMsVariance, type = 'supplementary figure', name = 'figCWMsVariance', dir = image_dir, width = 6.5, height = 7.5)
j <- expand.grid(unique(traits$trait), unique(traits$trait)) %>%
group_by(Var1, Var2) %>%
do(ct = cor.test(traits_wide[[as.character(.$Var1)]], traits_wide[[as.character(.$Var2)]])) %>%
mutate(Var1 = factor(trait_names[match(Var1, names(trait_names))], levels = trait_names),
Var2 = factor(trait_names[match(Var2, names(trait_names))], levels = trait_names),
cor = ct$estimate[[1]],
pval = ct$p.value,
pval = p.adjust(pval, method = 'BH', n = 55),
df = ct$parameter,
symb = ifelse(pval < 0.001, '***',
ifelse(pval < 0.01, '**',
ifelse(pval < 0.05, '*', ''))))
#convert to numeric to remove redundances
j <- filter(j, as.numeric(Var1) > as.numeric(Var2))
j$Var1 <- factor(j$Var1, levels = rev(levels(j$Var1)))
j
filter(j, pval < 0.05)
filter(j, pval < 0.05 & abs(corr) > 0.5 )
filter(j, pval < 0.05 & abs(cor) > 0.5)
filter(j, pval < 0.05 & abs(cor) > 0.5) %>% arrange(Corr)
filter(j, pval < 0.05 & abs(cor) > 0.5) %>% arrange(cor)
filter(j, pval < 0.05 & abs(cor) > 0.5) %>% arrange(abs(cor))
filter(j, pval < 0.05 & abs(cor) > 0.5) %>% arrange(desc(abs(cor)))
dim(tax_succ)
tax_succ_SILVA <- read.table('data\\seqs_filtered_uniques_otus_taxonomy_SILVA.sintax', fill = TRUE)
dim(tax_succ_SILVA)
# set wd and load packages
library(vegan)
library(tidyverse)
library(data.table)
library(stringr)
#### Metadata ####
# metadata from Yassour et al. 2016. Natural history of the infant gut microbiome and impact of antibiotic treatment on bacterial strain diversity and stability. Science translational medicine 8:343ra81. [www.sciencetranslationalmedicine.org/cgi/content/full/8/343/343ra81/DC1 as supplementary table S1]
#note that the supplementary file is an excel file with three worksheets; below, each worksheet was saved as three individual csv files
d1_meta1 <- fread("data\\diab_yassour_meta_antibiotics.csv")
d1_meta2 <- fread("data\\diab_yassour_meta_feeding.csv")[, c(1:5)]
d1_meta3 <- fread("data\\diab_yassour_meta_general.csv")[, c(1:6)]
# metadata from Kostic et al. 2016. The Dynamiccs of the human gut microbiome in development and in progression towards type 1 diabetes 17:260–273. [https://www.cell.com/cell-host-microbe/fulltext/S1931-3128(15)00021-9]
d2_meta <- fread("data\\diab_t1d_meta.csv")
#merge d1 metadata files
d1_meta <- d1_meta1 %>%
transmute(subject = Subject, days = `Duration (days)`) %>%
mutate(days = as.numeric(ifelse(days == 'Not known', 7, days))) %>%
group_by(subject) %>%
summarise(antibiotic_days = sum(days)) %>%
full_join(d1_meta2 %>% rename(subject = Subject), by = c('subject')) %>%
full_join(d1_meta3, by = 'subject') %>%
transmute(
subject,
antibiotic_days = ifelse(is.na(antibiotic_days), 0, antibiotic_days),
bf_end = `Final age of breastfeeding (months)` * 30.5,
country = Country,
delivery = `Delivery type`,
treatment_group = ifelse(antibiotic_days > 0, 'Antibiotics', 'Control'))
#clean up, convert days to months by dividing by 30.25
d2_meta <- d2_meta %>%
group_by(Subject_ID) %>%
mutate(n_abx = ifelse(sum(AbxAtCollection != 'no_abx') > 0, sum(AbxAtCollection != 'no_abx') * 7,
ifelse(TRUE %in% AbxExposureAbsolute, 1, 0))) %>%
ungroup(Subject_ID) %>%
transmute(
sampleID = G_id,
subject = Subject_ID,
antibiotic_days = n_abx,
delivery = Delivery_Route,
t = round(Age_at_Collection/30.25, 2),
country = Country,
treatment_group = ifelse(Case_Control == 'control', 'Control', 'T1D'))
#merge metadata
meta <- rbind(
d1_meta %>% gather(var, val, -subject),
d2_meta %>%
select(-sampleID, -t) %>%
distinct() %>%
gather(var, val, -subject))
#clean metadata
meta <- meta %>%
spread(var, val) %>%
mutate(
study = ifelse(subject %in% d1_meta$subject, 'Yassour2016', NA),
study = ifelse(subject %in% d2_meta$subject, 'Kostic2015', study),
delivery = ifelse(is.na(delivery), 'unknown', delivery),
delivery = ifelse(delivery %in% c('vaginal','Vaginal delivery'), 'vaginal', 'caesaren'),
antibiotic_days = as.numeric(antibiotic_days),
bf_end = as.numeric(bf_end))
#### OTU data ####
# otu file generated using succession_seqs_to_otus.sh and usearch pipeline
otus <- read.table('data\\seqs_filtered_uniques_OTU_table.txt', header = TRUE, sep = '\t', row.names = 1, comment.char = '')
otus <- otus[, colSums(otus) > 5000]
set.seed(7)
otus <- as.data.frame(t(rrarefy(t(otus), 5000)))
otus <- otus %>%
mutate(otu = row.names(otus)) %>%
gather(sample, abun, -otu) %>%
select(sample, otu, abun) %>%
filter(grepl("time", sample) | sample %in% d2_meta$sampleID) %>%
filter(abun > 0) %>%
mutate(
subject = sub("time.*", "", sample),
subject = ifelse(subject %in% d1_meta$subject, subject, d2_meta$subject[match(subject, d2_meta$sampleID)]),
t = ifelse(grepl("time", sample),
sub("dot", ".", fixed = TRUE, sub(".*time", "", sample)),
d2_meta$t[match(sample, d2_meta$sampleID)]),
t = as.numeric(t)) %>%
transmute(sampleID = paste(subject, t, sep = '_'), subject, t, otu, abun) %>%
arrange(subject, t)
#remove subjects with fewer than 10 samples and/or less than 900 days sampling
otus <- otus %>%
group_by(subject) %>%
filter(length(unique(t)) >= 10) %>%
filter(max(t) - min(t) > 30) %>%
ungroup()
#### Taxonomic data ####
# SILVA sintax (taxonomy) file generated using succession_seqs_to_otus.sh and usearch pipeline
#Note: I also tried to use LTP to assign taxonomy. But it has WAY more 'unclassified'. Since we're just interested in getting taxon traits by mining the literature -- i.e., not on taxonomy/phylogeny per se -- we get way more hits if we use the whole SILVA database. Later, we map the OTUs onto the LTP phylogeny based on 16S similarity.
#I clean up some of the messier taxonomic designations
tax_succ_SILVA <- read.table('data\\seqs_filtered_uniques_otus_taxonomy_SILVA.sintax', fill = TRUE) %>%
select(otu = V1, tax = V4) %>%
separate(tax, c('Kingdom','Phylum','Class','Order','Family','Genus','Species'), sep = ',', fill = 'right') %>%
mutate_all(funs(gsub('\\w:', '', .))) %>%
mutate(
Family = ifelse(Family %in% c('Clostridiaceae_1','Clostridium_sp._CA306'), 'Clostridiaceae', Family),
Family = ifelse(grepl("_|[0-9]+", Family), NA, Family),
Genus = trimws(Genus),
Genus = ifelse(Genus == 'Incertae_Sedis', NA, Genus),
Genus = gsub('\\[|\\]', '', Genus),
Genus = gsub('-.*', '', Genus),
Genus = gsub('Candidatus_', '', Genus),
Genus = gsub('_subsp.*', '', Genus),
Genus = gsub('_group', '', Genus),
Genus = gsub('_[0-9]+', '', Genus),
Species = ifelse(grepl('Eubacterium_|Sclerotinia_|Ruminococcus_', Genus),
gsub('Eubacterium_|Sclerotinia_|Ruminococcus_', '', Genus), Species),
Genus = gsub('_.*| .*', '', Genus),
Genus = ifelse(Genus == 'Family'| grepl('.*eae', Genus), NA, Genus),
Species = trimws(Species),
Species = ifelse(grepl('[0-9]+', Species), NA, Species),
Species = ifelse(grepl('sp.', Species, fixed = TRUE), NA, Species),
Species = ifelse(grepl('_', Species), sub('.*_', '', Species), Species),
Species = gsub('\\[|\\]', '', Species),
Species = ifelse(Species %in% c('KT','LYH','unidentified'), NA, Species))
#load raw taxonomy data from LTP version 132, which is used for searching trait databases,
#downloaded at [https://www.arb-silva.de/fileadmin/silva_databases/living_tree/LTP_release_132/LTPs132_SSU.csv]
#replace taxonomic NA with 'unclassified'
tax_succ_SILVA[is.na(tax_succ_SILVA)] <- 'unclassified'
saveRDS(tax_succ_SILVA, 'data\\succession_tax_SILVA_all.RDS')
write.csv(tax_succ_SILVA, 'data\\succession_tax_SILVA_all.csv')
write.csv(traits_sparse, 'curated_trait_data.csv')
write.csv(traits_wide, 'predicted_trait_data.csv')
